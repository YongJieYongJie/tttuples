// Code generated by codegen.go DO NOT EDIT.
// Version: 0.0.0
// Checksum: 376362407415514974

package tttuples

import (
	"github.com/YongJieYongJie/tttuples/atuple"
	"github.com/YongJieYongJie/tttuples/stuple"
)

// Atos converts a array-backed tuple from tttuples/atuple to an struct-backed
// tuple from tttuples/stuple.
func Atos2[T1, T2 any](
	t stuple.Packed2[T1, T2],
) atuple.Packed2[T1, T2] {
	return atuple.Pack2(
		t.Item1, t.Item2,
	)
}

// Stoa converts a struct-backed tuple from tttuples/stuple to an array-backed
// tuple from tttuples/atuple.
func Stoa2[T1, T2 any](
	t atuple.Packed2[T1, T2],
) stuple.Packed2[T1, T2] {
	item1, _ := t[0].(T1)
	item2, _ := t[1].(T2)
	return stuple.Packed2[T1, T2]{
		item1, item2,
	}
}

// Atos converts a array-backed tuple from tttuples/atuple to an struct-backed
// tuple from tttuples/stuple.
func Atos3[T1, T2, T3 any](
	t stuple.Packed3[T1, T2, T3],
) atuple.Packed3[T1, T2, T3] {
	return atuple.Pack3(
		t.Item1, t.Item2, t.Item3,
	)
}

// Stoa converts a struct-backed tuple from tttuples/stuple to an array-backed
// tuple from tttuples/atuple.
func Stoa3[T1, T2, T3 any](
	t atuple.Packed3[T1, T2, T3],
) stuple.Packed3[T1, T2, T3] {
	item1, _ := t[0].(T1)
	item2, _ := t[1].(T2)
	item3, _ := t[2].(T3)
	return stuple.Packed3[T1, T2, T3]{
		item1, item2, item3,
	}
}

// Atos converts a array-backed tuple from tttuples/atuple to an struct-backed
// tuple from tttuples/stuple.
func Atos4[T1, T2, T3, T4 any](
	t stuple.Packed4[T1, T2, T3, T4],
) atuple.Packed4[T1, T2, T3, T4] {
	return atuple.Pack4(
		t.Item1, t.Item2, t.Item3, t.Item4,
	)
}

// Stoa converts a struct-backed tuple from tttuples/stuple to an array-backed
// tuple from tttuples/atuple.
func Stoa4[T1, T2, T3, T4 any](
	t atuple.Packed4[T1, T2, T3, T4],
) stuple.Packed4[T1, T2, T3, T4] {
	item1, _ := t[0].(T1)
	item2, _ := t[1].(T2)
	item3, _ := t[2].(T3)
	item4, _ := t[3].(T4)
	return stuple.Packed4[T1, T2, T3, T4]{
		item1, item2, item3, item4,
	}
}

// Atos converts a array-backed tuple from tttuples/atuple to an struct-backed
// tuple from tttuples/stuple.
func Atos5[T1, T2, T3, T4, T5 any](
	t stuple.Packed5[T1, T2, T3, T4, T5],
) atuple.Packed5[T1, T2, T3, T4, T5] {
	return atuple.Pack5(
		t.Item1, t.Item2, t.Item3, t.Item4, t.Item5,
	)
}

// Stoa converts a struct-backed tuple from tttuples/stuple to an array-backed
// tuple from tttuples/atuple.
func Stoa5[T1, T2, T3, T4, T5 any](
	t atuple.Packed5[T1, T2, T3, T4, T5],
) stuple.Packed5[T1, T2, T3, T4, T5] {
	item1, _ := t[0].(T1)
	item2, _ := t[1].(T2)
	item3, _ := t[2].(T3)
	item4, _ := t[3].(T4)
	item5, _ := t[4].(T5)
	return stuple.Packed5[T1, T2, T3, T4, T5]{
		item1, item2, item3, item4, item5,
	}
}

// Atos converts a array-backed tuple from tttuples/atuple to an struct-backed
// tuple from tttuples/stuple.
func Atos6[T1, T2, T3, T4, T5, T6 any](
	t stuple.Packed6[T1, T2, T3, T4, T5, T6],
) atuple.Packed6[T1, T2, T3, T4, T5, T6] {
	return atuple.Pack6(
		t.Item1, t.Item2, t.Item3, t.Item4, t.Item5, t.Item6,
	)
}

// Stoa converts a struct-backed tuple from tttuples/stuple to an array-backed
// tuple from tttuples/atuple.
func Stoa6[T1, T2, T3, T4, T5, T6 any](
	t atuple.Packed6[T1, T2, T3, T4, T5, T6],
) stuple.Packed6[T1, T2, T3, T4, T5, T6] {
	item1, _ := t[0].(T1)
	item2, _ := t[1].(T2)
	item3, _ := t[2].(T3)
	item4, _ := t[3].(T4)
	item5, _ := t[4].(T5)
	item6, _ := t[5].(T6)
	return stuple.Packed6[T1, T2, T3, T4, T5, T6]{
		item1, item2, item3, item4, item5, item6,
	}
}

// Atos converts a array-backed tuple from tttuples/atuple to an struct-backed
// tuple from tttuples/stuple.
func Atos7[T1, T2, T3, T4, T5, T6, T7 any](
	t stuple.Packed7[T1, T2, T3, T4, T5, T6, T7],
) atuple.Packed7[T1, T2, T3, T4, T5, T6, T7] {
	return atuple.Pack7(
		t.Item1, t.Item2, t.Item3, t.Item4, t.Item5, t.Item6, t.Item7,
	)
}

// Stoa converts a struct-backed tuple from tttuples/stuple to an array-backed
// tuple from tttuples/atuple.
func Stoa7[T1, T2, T3, T4, T5, T6, T7 any](
	t atuple.Packed7[T1, T2, T3, T4, T5, T6, T7],
) stuple.Packed7[T1, T2, T3, T4, T5, T6, T7] {
	item1, _ := t[0].(T1)
	item2, _ := t[1].(T2)
	item3, _ := t[2].(T3)
	item4, _ := t[3].(T4)
	item5, _ := t[4].(T5)
	item6, _ := t[5].(T6)
	item7, _ := t[6].(T7)
	return stuple.Packed7[T1, T2, T3, T4, T5, T6, T7]{
		item1, item2, item3, item4, item5, item6, item7,
	}
}
